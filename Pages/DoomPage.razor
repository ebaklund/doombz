@page "/"

@inject IJSRuntime JsRuntime

<canvas
  @ref="@displayCnv"
  top="@top"
  left="@left"
  width="@width"
  height="@height"
  @onmousedown="@OnMouseDown"
  @onmousemove="@OnMouseMove"
  @onmouseup="@OnMouseUp"
  @onmouseout="@OnMouseOut"
  @ontouchstart="@OnTouchStart"
  @ontouchmove="@OnTouchMove"
  @ontouchend="@OnTouchEnd"
  @ontouchcancel="@OnTouchCancel"
/>

<canvas
  @ref="@renderCnv"
  top="@top"
  left="@left"
  width="@width"
  height="@height"
  style="display:none"
/>

@code {
  private int top;
  private int left;
  private long width;
  private long height;

  private ElementReference displayCnv;
  private ElementReference renderCnv;

  protected override async Task OnInitializedAsync()
  {
    top = 0;
    left = 0;
    width = await JsRuntime.InvokeAsync<long>("_WindowInterop.innerWidth");
    height = await JsRuntime.InvokeAsync<long>("_WindowInterop.innerHeight");
    await JsRuntime.InvokeAsync<object>("_DoomInterop.init", displayCnv, renderCnv);
  }

  public async Task DrawLine(long startX, long startY, long endX, long endY)
  {
    await JsRuntime.InvokeAsync<object>("_DoomInterop.drawLine", startX, startY, endX, endY);
  }

  public async Task Flush()
  {
    await JsRuntime.InvokeAsync<object>("_DoomInterop.flush");
  }

  bool isPainting = false;
  double x;
  double y;

  private void OnMouseDown(MouseEventArgs e)
  {
    x = e.ClientX;
    y = e.ClientY;
    isPainting = true;
  }

  private async Task OnMouseMove(MouseEventArgs e)
  {
    if (isPainting)
    {
      double eX = e.ClientX;
      double eY = e.ClientY;

      await DrawLine((long)x, (long)y, (long)eX, (long)eY);
      await Flush();

      x = eX;
      y = eY;
    }
  }

  private void OnMouseUp(MouseEventArgs e)
  {
    isPainting = false;
  }

  private void OnMouseOut(MouseEventArgs e)
  {
    isPainting = false;
  }

  private void OnTouchStart(TouchEventArgs e)
  {
    x = e.Touches[0].ClientX;
    y = e.Touches[0].ClientY;
    isPainting = true;
  }

  private async Task OnTouchMove(TouchEventArgs e)
  {
    if (isPainting)
    {
      double eX = e.Touches[0].ClientX;
      double eY = e.Touches[0].ClientY;

      await DrawLine((long)x, (long)y, (long)eX, (long)eY);
      await Flush();

      x = eX;
      y = eY;
    }
  }

  private void OnTouchEnd(TouchEventArgs e)
  {
    isPainting = false;
  }

  private void OnTouchCancel(TouchEventArgs e)
  {
    isPainting = false;
  }
}
